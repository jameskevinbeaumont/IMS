<div class="mb-3">
    <label for="search">@Label</label>
    <input type="text" class="form-control" 
           @bind-value="userInput" @bind-value:event="oninput" @onkeyup="OnKeyUp"/>
</div>

@if (searchResults != null && searchResults.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
                int itemIndex = 0;
                foreach (var item in searchResults)
                {
                    @* Adding the key here gives Blazor a unique value it can look at to keep from *@
                    @* rendering the list in its entirety everytime the Search button is clicked *@
                    <li 
                        @key="item.ID" 
                        class="@(itemIndex == currentItemIndex?"selected":"")" 
                        @onclick="() => HandleSelectedItem(item)">
                        @item.Name
                    </li>
                    itemIndex++;
                }

            }
        </ul>
    </div>

}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    // Function Delegate - basically just a function pointer
    // - string is the parameter of the function
    // - List<ItemViewModel> is the return type of the function
    // ? means the parameter does not have to be there
    [Parameter]
    public Func<string, List<ItemViewModel>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    // Below is another way to declare the delegate but the  ^^^above^^^ is easier
    // public delegate List<ItemViewModel> SearchFunction1(string searchFilter)

    // State variable
    private List<ItemViewModel>? searchResults = null;
    private ItemViewModel? selectedItem = null;

    private string _userInput = string.Empty;

    public string userInput
    { 
        get => _userInput; 
        set
        {
            _userInput = value;

            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                searchResults = SearchFunction(_userInput);
            }
        }
    }

    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private void HandleSelectedItem(ItemViewModel? item)
    {
        ClearHighlighting();

        if (item != null)
        {
            selectedItem = item;
            userInput = item?.Name ?? string.Empty;
            searchResults = null;

            OnItemSelected.InvokeAsync(item);
        }
    }

    private void ClearHighlighting()
    {
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        if (searchResults != null && searchResults.Count > 0 && (e.Code == "ArrowDown" || e.Code == "ArrowUp"))
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
            {
                currentItem = searchResults[++currentItemIndex];
            }
            else if (e.Code == "ArrowUp")
            {
                if (currentItemIndex > 0)
                    currentItem = searchResults[--currentItemIndex];
                else
                {
                    currentItem = null;
                    currentItemIndex = -1;
                }
            }
        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            HandleSelectedItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int ID { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}
