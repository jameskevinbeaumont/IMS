@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Price</th>
            <th></th>
            <th style="text-align: left"></th>
        </tr>
    </thead>
    <tbody>
        @if (inventories is not null && inventories.Count > 0)
        {
            foreach (var inv in inventories)
            {
                <InventoryListItemComponent Inventory="inv"></InventoryListItemComponent>
            }
        }

    </tbody>
</table>

@code {
    // Declare List of Inventory objects that is nullable (?)
    private List<Inventory>? inventories;

    [Parameter]
    public string? SearchInventoryFilter { get; set; }

    // Triggered when the routing parameter (SearchInventoryFilter) has been received and assigned
    protected override async Task OnParametersSetAsync()
    {
        // ??"" or ??string.Empty - when it is null, set it to an empty string
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(SearchInventoryFilter ?? "")).ToList();
    }
}