@inject IDeleteInventoryUseCase DeleteInventoryUseCase
@inject NavigationManager NavigationManager

@if (this.Inventory is not null)
{
    <tr>
        <td>@Inventory.InventoryName</td>
        <td>@Inventory.Quantity</td>
        <td>@Inventory.Price.ToString("c")</td>
        <td>
            <a class="btn btn-light" 
               href="/editinventory/@Inventory.InventoryID">
                Edit
            </a>
        </td>
        <td>
            <EditForm Enhance="true" Model="Inventory"
                FormName="@($"form-delete-inventory-{Inventory.InventoryID}")"
                OnValidSubmit="() => DeleteInventory(Inventory.InventoryID)">
                <button type="submit" class="btn btn-light">Delete</button>
            </EditForm>
        </td>
    </tr>
}

@code {

    // In order to make this public property a component parameter
    // we have to use [Parameter]
    // Routing Parameter
    [Parameter]
    public Inventory? Inventory { get; set; }

    private async Task DeleteInventory(int inventoryID)
    {
        await DeleteInventoryUseCase.ExecuteAsync(inventoryID);
        NavigationManager.Refresh();
    }
}
