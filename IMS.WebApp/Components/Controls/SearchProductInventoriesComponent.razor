@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="input-group">
    <input class="form-control"
           placeholder="Type something to search"
           @bind-value="searchFilter" @bind-value:event="oninput">
    </input>
    <button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories != null && inventories.Count > 0)
{
    <div class="search-result">
        <ul>
            @foreach (var inv in inventories)
            {
                @* Adding the key here gives Blazor a unique value it can look at to keep from *@
                @* rendering the list in its entirety everytime the Search button is clicked *@
                @* => (arrow function) states that we are going to provide a delegate (HandleSelectInventory) *@
                <li @key="inv.InventoryID" @onclick="() => { HandleSelectInventory(inv); }">
                    @inv.InventoryName
                </li>
            }
        </ul>
    </div>
}

@code {
    // Public parameter
    [Parameter]
    // Event call back
    public EventCallback<Inventory> OnInventorySelected { get; set; }

    private string _searchFilter;
    // Two-way data binding between the state variable searchFilter
    // and the UI (HTML)
    private string searchFilter
    {
        get => _searchFilter;
        set
        {
            _searchFilter = value;
            HandleSearch();
        }
    }

    // State variable inventories
    private List<Inventory> inventories = new List<Inventory>();

    // Event handler
    private async Task HandleSearch()
    {
        await Task.Delay(1000); // Simulate a relatively long running database call
        inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(searchFilter)).ToList();

        StateHasChanged();
    }

    private async Task HandleSelectInventory(Inventory inventory)
    {
        await OnInventorySelected.InvokeAsync(inventory);
        // After the inventory is selected we need to collapse the inventory list/dropdown so we use .Clear()
        // to clear the inventories state variable
        inventories.Clear();
    }
}
