@page "/addproduct"

@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br />

@* The EditForm is going to collect the data for the type of Product *@
@* When we add the rendermode of InteractiveServer to this page, we no *@
@* longer need the FormName and can delete it though we can also leave it *@
<EditForm Model="product" FormName="formProduct" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @* Where you place the ValidationSummary component dictates where the
       validate messages will be displayed *@
    <ValidationSummary></ValidationSummary>

    <div class="mb-3">
        <label for="name">Product Name</label>
        <InputText 
            id="name"
            @bind-Value="product.ProductName"
            class="form-control">
        </InputText>
        <ValidationMessage For="() => product.ProductName"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity"
                     @bind-Value="product.Quantity"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => product.Quantity"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="price">Price</label>
        <InputNumber id="price"
                     @bind-Value="product.Price"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => product.Price"></ValidationMessage>

    </div>

    <div class="mb-3">
        <label>Inventories</label>
        <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Save</button>&nbsp;
    <a href="/inventories" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
    // We need SupplyParameterFromForm attribute to get the data from the form
    // after the submit...but this also requires that our product
    // variable to be a property, so we add the get and the set and initialize
    // as a new Product object.

    // No longer need this when rendermode is InteractiveServer
    //[SupplyParameterFromForm]
    private Product product { get; set; } = new Product();

    // This method handles the HTTP Post request when the user clicks the
    // above "Save" button via the submit of the form
    //
    // No longer a post back with rendermode InteractiveServer...everything
    // goes through the SignalR channel
    private async Task Save()
    {
        await AddProductUseCase.ExecuteAsync(product);

        NavigationManager.NavigateTo("/products");
    }
}
