@page "/purchase"

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@rendermode InteractiveServer

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIDUseCase ViewInventoryByIDUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

<h3>Purchase Inventory</h3>
<br />

<EditForm Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="mb-3">
        <label for="po">Purchase Order #</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="mb-3">
                <AutoCompleteComponent Label="Inventory to Purchase"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="HandleItemSelected">
                </AutoCompleteComponent>
                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>  Price: </text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                }
            </div>
        </div>
    </div>
    <br/>
    <div class="mb-3">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">Purchase</button>
</EditForm>

@code {
    // State variables
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory? selectedInventory = null;

    private List<ItemViewModel>? SearchInventory(string name)
    {
        var list = ViewInventoriesByNameUseCase.ExecuteAsync(name).GetAwaiter().GetResult();

        if (list == null)
            return null;

        // This is called PROJECTION - we are projecting from one type to another
        // x represents an item in the list...
        // ...and then we create a new object (ItemViewModel)
        return list.Select(x => new ItemViewModel { ID = x.InventoryID, Name = x.InventoryName})?.ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedInventory = await ViewInventoryByIDUseCase.ExecuteAsync(item.ID);

        purchaseViewModel.InventoryID = item.ID;
        purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(
                purchaseViewModel.PONumber,
                selectedInventory, 
                purchaseViewModel.QuantityToPurchase, 
                "Jim"
                );

        purchaseViewModel = new PurchaseViewModel();
        selectedInventory = null;
    }
}
